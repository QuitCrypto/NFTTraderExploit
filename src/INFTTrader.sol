// SPDX-License-Identifier: MIT
pragma solidity 0.8.23;

enum swapStatus { Opened, Closed, Cancelled }

struct swapStruct {
    address dapp;
    address typeStd;
    uint256[] tokenId;
    uint256[] blc;
    bytes data;
}

// SwapIntent Struct
struct swapIntent {
    uint256 id;
    address payable addressOne;
    uint256 valueOne;
    address payable addressTwo;
    uint256 valueTwo;
    uint256 swapStart;
    uint256 swapEnd;
    uint256 swapFee;
    swapStatus status;
}

interface INFTTrader {
    function createSwapIntent(swapIntent memory _swapIntent, swapStruct[] memory _nftsOne, swapStruct[] memory _nftsTwo) payable external;
    function closeSwapIntent(address _swapCreator, uint256 _swapId) payable external;
    function editCounterPart(uint256 _swapId, address payable _counterPart) external;
    function transferOwnership(address _newOwner) external;
    function setVaultAddress(address _vault) external;
    function setWhitelist(address, bool) external;
    function owner() external returns (address);
}
